<script setup>
import { ref, reactive } from "vue";
import { useRouter } from "vue-router";
//COMPONENTS
import HeaderSidebar from "@/components/molecules/header-sidebar.vue";
import MenuItemSidebar from "@/components/molecules/menu-item-sidebar.vue";
import BaseMenuSection from "@/components/sidebar/base-menu-section.vue";
import MenuSectionHeaderSidebar from "@/components/molecules/menu-section-header-sidebar.vue";
import BaseSidebar from "@/components/sidebar/base-sidebar.vue";
//DATA
import menusObject from "@/data/menus.js";

const props = defineProps({
  isOffCanvasOpen: Boolean,
});

const router = useRouter();
const isSidebarOpen = ref(true);
const isSidebarHovering = ref(false);
const activeItemsContainer = reactive({
  items: [],
});
const menus = ref(menusObject);

const toggleSidebar = () => {
  isSidebarOpen.value = !isSidebarOpen.value;
};

const handleMouseEnter = () => {
  if (!isSidebarOpen.value) {
    isSidebarHovering.value = true;
  }
};

const handleMouseLeave = () => {
  if (!isSidebarOpen.value) {
    isSidebarHovering.value = false;
  }
};

const handleToggleItem = itemData => {
  const { level, id, parent } = itemData;
  const hasItemInActiveItemsContainer = activeItemsContainer.items.some(
    activeItem => activeItem.id === id && activeItem.parent === parent
  );

  //check if it has already item in active items container, then remove it.
  if (hasItemInActiveItemsContainer) {
    activeItemsContainer.items = [...activeItemsContainer.items].filter(
      activeItem => activeItem.parent !== parent
    );

    console.log("remove item on a list");
    return;
  }

  //toggle item in active items container based on its parent item. Root item's parent ==> "main"
  activeItemsContainer.items = [...activeItemsContainer.items].filter(
    activeItem => activeItem.parent !== parent
  );

  //Append clicked item in active items container based on their dropdown level
  if (level === "root") {
    const copy = [...activeItemsContainer.items];
    activeItemsContainer.items = [...copy, itemData];
  } else if (level === "first") {
    const copy = [...activeItemsContainer.items].map(activeItem => {
      if (activeItem.label === itemData.parent) {
        return {
          ...activeItem,
          submenuHeight: activeItem.itemsLength * 40 + itemData.submenuHeight,
        };
      }
      return activeItem;
    });
    activeItemsContainer.items = [...copy, itemData];
  }

  // else if (level === "second") {
  //   const copy = [...activeItemsContainer.items].map(activeItem => {
  //     //parent only
  //     if (activeItem.label === itemData.parent) {
  //       return {
  //         ...activeItem,
  //         submenuHeight: activeItem.itemsLength * 40 + itemData.submenuHeight,
  //       };
  //     }

  //     if (activeItem.level === "root") {
  //       return {
  //         ...activeItem,
  //         submenuHeight:
  //           activeItem.itemsLength * 40 + itemData.submenuHeight,
  //       };
  //     }
  //     return activeItem;
  //   });
  //   activeItemsContainer.items = [...copy, itemData];
  // }
};

defineExpose({
  isSidebarOpen,
  isSidebarHovering,
  toggleSidebar,
});
</script>

<template>
  <BaseSidebar
    :isSidebarOpen="isSidebarOpen"
    :isSidebarHovering="isSidebarHovering"
    :isOffCanvasOpen="isOffCanvasOpen"
  >
    <template #sidebar-header>
      <HeaderSidebar
        @toggleSidebar="toggleSidebar"
        :isSidebarOpen="isSidebarOpen"
        :isSidebarHovering="isSidebarHovering"
      />
    </template>
    <template #sidebar-menu>
      <MenuItemSidebar
        :isSidebarOpen="isSidebarOpen"
        :isSidebarHovering="isSidebarHovering"
        :label="'Dashboard'"
        :type="'link-item'"
        :href="'/'"
        :isLink="true"
      ></MenuItemSidebar>

      <BaseMenuSection v-for="menuSection in menus" :key="menuSection.id">
        <template #menu-section-header>
          <MenuSectionHeaderSidebar
            :isSidebarOpen="isSidebarOpen"
            :isSidebarHovering="isSidebarHovering"
          >
            {{ menuSection.headerLabel }}
          </MenuSectionHeaderSidebar>
        </template>
        <template #menu-items>
          <!-- MENU ITEMS -->
          <MenuItemSidebar
            @handleToggleItem="handleToggleItem"
            :isSidebarOpen="isSidebarOpen"
            :isSidebarHovering="isSidebarHovering"
            v-for="item in menuSection.items"
            :key="item.id"
            :id="item.id"
            :itemsLength="item.items.length"
            :label="item.label"
            :type="item.type"
            :href="item.url"
            :isCollapsible="item.isCollapsible"
            :isLink="item.isLink"
            :parentTag="'main'"
            :activeItems="activeItemsContainer.items"
          >
            <!-- FIRST LEVEL SUBMENU ITEMS -->
            <MenuItemSidebar
              @handleToggleItem="handleToggleItem"
              :isSidebarOpen="isSidebarOpen"
              :isSidebarHovering="isSidebarHovering"
              v-for="firstItem in item.items"
              :key="firstItem.id"
              :id="firstItem.id"
              :itemsLength="firstItem.items.length"
              :label="firstItem.label"
              :type="firstItem.type"
              :href="firstItem.url"
              :isCollapsible="firstItem.isCollapsible"
              :bulletType="firstItem.bulletType"
              :parentTag="item.label"
              :isLink="firstItem.isLink"
              :itemLevel="'first'"
              :activeItems="activeItemsContainer.items"
            >
              <!-- SECOND LEVEL SUBMENU ITEMS   -->
              <MenuItemSidebar
                @handleToggleItem="handleToggleItem"
                :isSidebarOpen="isSidebarOpen"
                :isSidebarHovering="isSidebarHovering"
                v-for="secondItem in firstItem.items"
                :key="secondItem.id"
                :itemsLength="secondItem.items.length"
                :label="secondItem.label"
                :type="secondItem.type"
                :href="secondItem.url"
                :isCollapsible="secondItem.isCollapsible"
                :bulletType="secondItem.bulletType"
                :parentTag="firstItem.label"
                :isLink="secondItem.isLink"
                :itemLevel="'second'"
                :activeItems="activeItemsContainer.items"
              >
                <!-- THIRD LEVEL SUBMENU ITEMS   -->
                <MenuItemSidebar
                  :isSidebarOpen="isSidebarOpen"
                  :isSidebarHovering="isSidebarHovering"
                  v-for="thirdItem in secondItem.items"
                  :key="thirdItem.id"
                  :itemsLength="thirdItem.items.length"
                  :label="thirdItem.label"
                  :type="thirdItem.type"
                  :href="thirdItem.url"
                  :isCollapsible="thirdItem.isCollapsible"
                  :bulletType="thirdItem.bulletType"
                  :parentTag="secondItem.label"
                  :isLink="thirdItem.isLink"
                  :itemLevel="'third'"
                >
                </MenuItemSidebar>
                <!-- THIRD LEVEL SUBMENU ITEMS   -->
              </MenuItemSidebar>
              <!-- SECOND LEVEL SUBMENU ITEMS   -->
            </MenuItemSidebar>
            <!-- FIRST LEVEL SUBMENU ITEMS -->
          </MenuItemSidebar>
          <!-- MENU ITEMS -->
        </template>
      </BaseMenuSection>
    </template>
  </BaseSidebar>
</template>

<style lang="scss" scoped>
@import "@/assets/scss/components/sidebar.scss";
</style>
